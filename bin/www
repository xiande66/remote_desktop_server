#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
var connection = require('../routes/connection')

const { Server } = require('socket.io')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io = new Server(server, {
  pingInterval:10000,
  pingTimeout:5000,
  cookie:false,
  cors: {
    origin: "http://localhost:8080",
    methods: ["GET", "POST"]
  }
})


io.on('connection', (socket) => {
  require('events').captureRejections = true
  socket.on('list items', async (callback) => {
    try {
      const items = await findItems()
      callback({
        status: 'OK',
        items,
      })
    } catch (e) {
      callback({
        status: 'NOK',
      })
    }
  })
  
  socket.on('list products', async () => {
    const products = await findProducts()
    socket.emit('products', products)
  })

  socket[Symbol.for('nodejs.rejection')] = (err) => {
    socket.emit('error', err)
  }
  connection(socket)
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
